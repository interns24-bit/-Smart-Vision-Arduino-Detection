import cv2
import numpy as np
import pickle
from picamera2 import Picamera2

# Load the trained model
try:
    with open("arduino_board_model.pkl", "rb") as f:
        model = pickle.load(f)
    print("Model loaded successfully.")
except FileNotFoundError:
    print("Error: arduino_board_model.pkl not found. Train the model first.")
    exit()

def preprocess_image(image):
    """
    Resize the image to 64x64 and flatten it for model prediction.
    """
    resized = cv2.resize(image, (64, 64))
    flattened = resized.flatten()
    return flattened

def is_object_present_and_centered(roi_frame, lower_color, upper_color):
    """
    Check if an object is present in the ROI and centered.
    Uses color masking to detect the object and ensures it is near the center.
    """
    hsv = cv2.cvtColor(roi_frame, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower_color, upper_color)
    detected_pixels = cv2.countNonZero(mask)

    # Check if enough pixels are detected (object is present)
    if detected_pixels > 500:  # Adjust threshold as needed
        # Calculate the moments of the mask to find the center
        moments = cv2.moments(mask)
        if moments["m00"] > 0:
            cx = int(moments["m10"] / moments["m00"])  # X center of the object
            cy = int(moments["m01"] / moments["m00"])  # Y center of the object
            height, width = mask.shape

            # Check if the object's center is close to the ROI's center
            if abs(cx - width // 2) < 30 and abs(cy - height // 2) < 30:  # 30-pixel tolerance
                return True
    return False

# Initialize the camera
picam2 = Picamera2()
picam2.configure(picam2.create_preview_configuration(main={"format": 'XRGB8888', "size": (640, 480)}))
picam2.start()

# Define ROI (Region of Interest)
roi = (200, 100, 440, 380)  # Adjust as needed

# Define color ranges for purple and blue in HSV
lower_purple = np.array([125, 50, 50])  # Lower bound for purple
upper_purple = np.array([160, 255, 255])  # Upper bound for purple

lower_blue = np.array([100, 50, 50])  # Lower bound for blue
upper_blue = np.array([125, 255, 255])  # Upper bound for blue

# Initialize counters for each category
count_arduino_maker = 0
count_arduino_uno = 0

# Flag to ensure an object is counted only once
object_in_roi = False

print("Press 'q' to quit.")

while True:
    # Capture a frame
    frame = picam2.capture_array()
    frame = cv2.cvtColor(frame, cv2.COLOR_BGRA2BGR)

    # Draw ROI rectangle
    x1, y1, x2, y2 = roi
    cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 255, 0), 2)  # Yellow box for ROI

    # Crop the ROI for processing
    roi_frame = frame[y1:y2, x1:x2]

    # Check if an object is present and centered in the ROI for purple
    if is_object_present_and_centered(roi_frame, lower_purple, upper_purple):
        # Preprocess the ROI frame for classification
        processed = preprocess_image(roi_frame)

        # Perform the prediction
        prediction = model.predict([processed])[0]
        confidence = model.predict_proba([processed])[0]  # Get confidence scores

        # Assign color and label for Arduino Maker (purple)
        color = (255, 0, 255)  # Purple color for bounding box
        label = "Arduino Maker"

        # Draw bounding box and label
        cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
        cv2.putText(frame, f"Prediction: {label}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

        # Count purple objects passing through the ROI
        if not object_in_roi:
            count_arduino_maker += 1
            object_in_roi = True  # Mark object as counted

    # Check if an object is present and centered in the ROI for blue
    elif is_object_present_and_centered(roi_frame, lower_blue, upper_blue):
        # Preprocess the ROI frame for classification
        processed = preprocess_image(roi_frame)

 # Perform the prediction
        prediction = model.predict([processed])[0]
        confidence = model.predict_proba([processed])[0]  # Get confidence scores

        # Assign color and label for Arduino Uno (blue)
        color = (255, 0, 0)  # Blue color for bounding box
        label = "Arduino Uno"

        # Draw bounding box and label
        cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
        cv2.putText(frame, f"Prediction: {label}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

        # Count blue objects passing through the ROI
        if not object_in_roi:
            count_arduino_uno += 1
            object_in_roi = True  # Mark object as counted

    else:
        # Reset flag if no object detected or not centered
        object_in_roi = False

    # Display counters on the frame
    cv2.putText(frame, f"Arduino Maker: {count_arduino_maker}", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 255), 2)
    cv2.putText(frame, f"Arduino Uno: {count_arduino_uno}", (10, 80), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)

    # Display the live feed with predictions and counters
    cv2.imshow("Color and Object Detection", frame)

    # Exit on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cv2.destroyAllWindows()
picam2.stop()

